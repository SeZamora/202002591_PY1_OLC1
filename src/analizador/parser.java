
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;
import estructuras.*;
import analizador.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\003\000\002\004\010\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\006\005\000\002\006\004\000" +
    "\002\006\005\000\002\006\004\000\002\006\005\000\002" +
    "\006\004\000\002\006\005\000\002\006\004\000\002\010" +
    "\006\000\002\011\004\000\002\011\003\000\002\011\004" +
    "\000\002\011\003\000\002\011\004\000\002\011\003\000" +
    "\002\011\004\000\002\011\003\000\002\011\004\000\002" +
    "\011\003\000\002\011\004\000\002\011\003\000\002\011" +
    "\004\000\002\011\003\000\002\011\004\000\002\011\003" +
    "\000\002\011\004\000\002\011\003\000\002\011\004\000" +
    "\002\011\003\000\002\012\003\000\002\013\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\004\004\004\001\002\000\012\003\016\020" +
    "\013\021\017\027\010\001\002\000\004\002\006\001\002" +
    "\000\004\002\001\001\002\000\012\005\uffff\020\uffff\021" +
    "\uffff\027\uffff\001\002\000\006\006\066\010\065\001\002" +
    "\000\012\005\ufff8\020\ufff8\021\ufff8\027\ufff8\001\002\000" +
    "\012\005\ufffc\020\ufffc\021\ufffc\027\ufffc\001\002\000\004" +
    "\006\025\001\002\000\012\005\ufffa\020\ufffa\021\ufffa\027" +
    "\ufffa\001\002\000\012\005\020\020\013\021\017\027\010" +
    "\001\002\000\012\005\ufff7\020\ufff7\021\ufff7\027\ufff7\001" +
    "\002\000\012\005\uffd0\020\uffd0\021\uffd0\027\uffd0\001\002" +
    "\000\004\002\000\001\002\000\012\005\ufffb\020\ufffb\021" +
    "\ufffb\027\ufffb\001\002\000\012\005\ufff9\020\ufff9\021\ufff9" +
    "\027\ufff9\001\002\000\012\005\ufffe\020\ufffe\021\ufffe\027" +
    "\ufffe\001\002\000\012\005\ufffd\020\ufffd\021\ufffd\027\ufffd" +
    "\001\002\000\004\027\026\001\002\000\004\010\027\001" +
    "\002\000\016\004\034\023\033\025\032\026\031\030\036" +
    "\031\035\001\002\000\004\007\064\001\002\000\006\013" +
    "\041\016\061\001\002\000\006\013\041\016\056\001\002" +
    "\000\004\013\041\001\002\000\004\016\053\001\002\000" +
    "\004\013\041\001\002\000\004\016\037\001\002\000\004" +
    "\030\040\001\002\000\004\007\ufff3\001\002\000\012\023" +
    "\045\025\044\026\043\031\046\001\002\000\004\007\uffee" +
    "\001\002\000\006\007\uffec\013\041\001\002\000\006\007" +
    "\uffe6\013\041\001\002\000\006\007\uffe8\013\041\001\002" +
    "\000\006\007\uffea\013\041\001\002\000\004\007\uffeb\001" +
    "\002\000\004\007\uffe9\001\002\000\004\007\uffe7\001\002" +
    "\000\004\007\uffed\001\002\000\004\005\054\001\002\000" +
    "\004\007\ufff2\001\002\000\004\007\uffef\001\002\000\004" +
    "\025\060\001\002\000\004\007\ufff0\001\002\000\004\007" +
    "\ufff4\001\002\000\004\026\063\001\002\000\004\007\ufff1" +
    "\001\002\000\004\007\ufff5\001\002\000\012\005\ufff6\020" +
    "\ufff6\021\ufff6\027\ufff6\001\002\000\026\004\077\005\075" +
    "\011\074\012\101\014\073\015\103\017\100\023\072\027" +
    "\071\031\102\001\002\000\004\023\067\001\002\000\004" +
    "\007\070\001\002\000\012\005\uffcf\020\uffcf\021\uffcf\027" +
    "\uffcf\001\002\000\030\004\077\005\075\007\uffdd\011\074" +
    "\012\101\014\073\015\103\017\100\023\072\027\071\031" +
    "\102\001\002\000\030\004\077\005\075\007\uffd5\011\074" +
    "\012\101\014\073\015\103\017\100\023\072\027\071\031" +
    "\102\001\002\000\030\004\077\005\075\007\uffd7\011\074" +
    "\012\101\014\073\015\103\017\100\023\072\027\071\031" +
    "\102\001\002\000\030\004\077\005\075\007\uffe3\011\074" +
    "\012\101\014\073\015\103\017\100\023\072\027\071\031" +
    "\102\001\002\000\030\004\077\005\075\007\uffdf\011\074" +
    "\012\101\014\073\015\103\017\100\023\072\027\071\031" +
    "\102\001\002\000\004\007\111\001\002\000\030\004\077" +
    "\005\075\007\uffe1\011\074\012\101\014\073\015\103\017" +
    "\100\023\072\027\071\031\102\001\002\000\030\004\077" +
    "\005\075\007\uffd9\011\074\012\101\014\073\015\103\017" +
    "\100\023\072\027\071\031\102\001\002\000\030\004\077" +
    "\005\075\007\uffdb\011\074\012\101\014\073\015\103\017" +
    "\100\023\072\027\071\031\102\001\002\000\030\004\077" +
    "\005\075\007\uffd1\011\074\012\101\014\073\015\103\017" +
    "\100\023\072\027\071\031\102\001\002\000\030\004\077" +
    "\005\075\007\uffd3\011\074\012\101\014\073\015\103\017" +
    "\100\023\072\027\071\031\102\001\002\000\004\007\uffd4" +
    "\001\002\000\004\007\uffd2\001\002\000\004\007\uffdc\001" +
    "\002\000\004\007\uffda\001\002\000\004\007\uffe2\001\002" +
    "\000\012\005\uffe5\020\uffe5\021\uffe5\027\uffe5\001\002\000" +
    "\004\007\uffe0\001\002\000\004\007\uffe4\001\002\000\004" +
    "\007\uffd8\001\002\000\004\007\uffd6\001\002\000\004\007" +
    "\uffde\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\004\002\004\001\001\000\014\003\014\004" +
    "\006\010\011\012\013\013\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\022\010\023\012\020\013\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\027\001\001\000\002\001\001\000\004\006\061\001" +
    "\001\000\004\006\056\001\001\000\004\006\054\001\001" +
    "\000\002\001\001\000\004\006\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\051\001\001\000\004\006" +
    "\050\001\001\000\004\006\047\001\001\000\004\006\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\115\001\001\000\004\011\114\001\001\000\004\011" +
    "\113\001\001\000\004\011\112\001\001\000\004\011\111" +
    "\001\001\000\002\001\001\000\004\011\107\001\001\000" +
    "\004\011\106\001\001\000\004\011\105\001\001\000\004" +
    "\011\104\001\001\000\004\011\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}






// error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("recuperado");


    }

    //momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("gege ");

    }



    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= llavea INTRO llavec 
            {
              Object RESULT =null;
		System.out.println("Fin de analisis de entrada");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INTRO ::= CONJUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INTRO ::= INTRO CONJUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INTRO ::= INTRO EXPRESIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INTRO ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INTRO ::= INTRO PORCENTAJES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INTRO ::= PORCENTAJES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INTRO ::= INTRO ENTRADAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INTRO ::= ENTRADAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INTRO ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONJUNTOS ::= conj dospuntos id flecha COMBINACIONES puntocoma 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String idd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int combinacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int combinacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object combinacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("");System.out.println(idd+" "+combinacion);
                                                                                   Conjunto conjunto = new Conjunto(idd,(String)combinacion);
                                                                                                   Union.conjuntos.add(conjunto);
                                                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTOS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // COMBINACIONES ::= letra guionondulado letra 
            {
              Object RESULT =null;
		int letra1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int letra1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String letra1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int guionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int guionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String guion = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int letra2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int letra2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String letra2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=letra1+guion+letra2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBINACIONES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // COMBINACIONES ::= numero guionondulado numero 
            {
              Object RESULT =null;
		int numero1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String numero1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int guionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int guionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String guion = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numero2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=numero1+guion+numero2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBINACIONES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // COMBINACIONES ::= acci guionondulado acci 
            {
              Object RESULT =null;
		int simbolo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int simbolo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String simbolo1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int guionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int guionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String guion = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int simbolo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbolo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simbolo2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=simbolo1+guion+simbolo2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBINACIONES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COMBINACIONES ::= llavea guionondulado llavec 
            {
              Object RESULT =null;
		int llave1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llave1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llave1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int guionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int guionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String guion = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llave2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llave2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String llave2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=llave1+guion+llave2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBINACIONES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COMBINACIONES ::= letra COMASLETRA 
            {
              Object RESULT =null;
		int letracoma1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int letracoma1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String letracoma1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int letracoma2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int letracoma2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object letracoma2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=letracoma1+letracoma2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBINACIONES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COMBINACIONES ::= numero COMASLETRA 
            {
              Object RESULT =null;
		int numerocoma1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numerocoma1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String numerocoma1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numerocoma2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numerocoma2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object numerocoma2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=numerocoma1+numerocoma2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBINACIONES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // COMBINACIONES ::= cadena COMASLETRA 
            {
              Object RESULT =null;
		int cadenaaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadenaaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadenaa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int combinacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int combinacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object combinacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=cadenaa+combinacion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBINACIONES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // COMBINACIONES ::= caracterEspecial COMASLETRA 
            {
              Object RESULT =null;
		int especialleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int especialright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String especial = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int combinacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int combinacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object combinacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=especial+combinacion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBINACIONES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // COMASLETRA ::= coma letra COMASLETRA 
            {
              Object RESULT =null;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int letracomaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int letracomaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String letracoma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int combinacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int combinacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object combinacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=comaa+letracoma+combinacion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMASLETRA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // COMASLETRA ::= coma letra 
            {
              Object RESULT =null;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int letracomaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int letracomaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String letracoma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=comaa+letracoma; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMASLETRA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // COMASLETRA ::= coma caracterEspecial COMASLETRA 
            {
              Object RESULT =null;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int especialleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int especialright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String especial = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int combinacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int combinacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object combinacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=comaa+especial+combinacion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMASLETRA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // COMASLETRA ::= coma caracterEspecial 
            {
              Object RESULT =null;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int especialleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int especialright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String especial = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=comaa+especial; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMASLETRA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // COMASLETRA ::= coma cadena COMASLETRA 
            {
              Object RESULT =null;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cadenaaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadenaaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadenaa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int combinacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int combinacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object combinacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=comaa+cadenaa+combinacion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMASLETRA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // COMASLETRA ::= coma cadena 
            {
              Object RESULT =null;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cadenaaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadenaa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=comaa+cadenaa; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMASLETRA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // COMASLETRA ::= coma numero COMASLETRA 
            {
              Object RESULT =null;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int numerocomaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numerocomaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String numerocoma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int combinacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int combinacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object combinacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=comaa+numerocoma+combinacion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMASLETRA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // COMASLETRA ::= coma numero 
            {
              Object RESULT =null;
		int comaaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comaaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String comaa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numerocomaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numerocomaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numerocoma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=comaa+numerocoma; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMASLETRA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESIONES ::= id flecha COMBEXPRE puntocoma 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String idd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expresionnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expresionnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expresionn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("");System.out.println(idd+expresionn);
                                                                                       Expresion expresion = new Expresion(idd,(String)expresionn);
                                                                                                       Union.expresiones.add(expresion);
                                                                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COMBEXPRE ::= punto COMBEXPRE 
            {
              Object RESULT =null;
		int puntooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int puntooright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String puntoo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int combinacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int combinacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object combinacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=puntoo+combinacion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBEXPRE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // COMBEXPRE ::= punto 
            {
              Object RESULT =null;
		int puntooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int puntooright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String puntoo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=puntoo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBEXPRE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // COMBEXPRE ::= llavea COMBEXPRE 
            {
              Object RESULT =null;
		int llaveaaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llaveaaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String llaveaa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int combinacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int combinacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object combinacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=llaveaa+combinacion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBEXPRE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // COMBEXPRE ::= llavea 
            {
              Object RESULT =null;
		int llaveaaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llaveaaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String llaveaa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=llaveaa; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBEXPRE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // COMBEXPRE ::= llavec COMBEXPRE 
            {
              Object RESULT =null;
		int llaveccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llaveccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String llavecc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int combinacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int combinacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object combinacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=llavecc+combinacion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBEXPRE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // COMBEXPRE ::= llavec 
            {
              Object RESULT =null;
		int llaveccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llaveccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String llavecc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=llavecc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBEXPRE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // COMBEXPRE ::= id COMBEXPRE 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String idd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int combinacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int combinacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object combinacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=idd+combinacion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBEXPRE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // COMBEXPRE ::= id 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String idd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=idd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBEXPRE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // COMBEXPRE ::= asterisco COMBEXPRE 
            {
              Object RESULT =null;
		int asteriscooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asteriscooright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String asteriscoo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int combinacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int combinacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object combinacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=asteriscoo+combinacion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBEXPRE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // COMBEXPRE ::= asterisco 
            {
              Object RESULT =null;
		int asteriscooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asteriscooright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String asteriscoo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=asteriscoo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBEXPRE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // COMBEXPRE ::= interrogacion COMBEXPRE 
            {
              Object RESULT =null;
		int interrogacionnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int interrogacionnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String interrogacionn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int combinacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int combinacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object combinacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=interrogacionn+combinacion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBEXPRE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COMBEXPRE ::= interrogacion 
            {
              Object RESULT =null;
		int interrogacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int interrogacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String interrogacion = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=interrogacion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBEXPRE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COMBEXPRE ::= or COMBEXPRE 
            {
              Object RESULT =null;
		int orrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String orr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int combinacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int combinacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object combinacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=orr+combinacion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBEXPRE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COMBEXPRE ::= or 
            {
              Object RESULT =null;
		int orrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int orrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String orr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=orr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBEXPRE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COMBEXPRE ::= cadena COMBEXPRE 
            {
              Object RESULT =null;
		int cadenaaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadenaaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadenaa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int combinacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int combinacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object combinacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=cadenaa+combinacion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBEXPRE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COMBEXPRE ::= cadena 
            {
              Object RESULT =null;
		int cadenaaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cadenaa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=cadenaa; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBEXPRE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COMBEXPRE ::= mas COMBEXPRE 
            {
              Object RESULT =null;
		int massleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int massright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mass = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int combinacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int combinacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object combinacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=mass+combinacion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBEXPRE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COMBEXPRE ::= mas 
            {
              Object RESULT =null;
		int massleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int massright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String mass = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=mass;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBEXPRE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COMBEXPRE ::= caracterEspecial COMBEXPRE 
            {
              Object RESULT =null;
		int especialleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int especialright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String especial = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int combinacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int combinacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object combinacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String especial2 = "\""+"\\"+"\"";
                                                                    RESULT=especial2+combinacion; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBEXPRE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COMBEXPRE ::= caracterEspecial 
            {
              Object RESULT =null;
		int especialleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int especialright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String especial = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  String especial2 = "\""+"\\"+"\"";
                                RESULT=especial2;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMBEXPRE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PORCENTAJES ::= porcentajes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PORCENTAJES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ENTRADAS ::= id dospuntos cadena puntocoma 
            {
              Object RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String idd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cadenaaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cadenaaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cadenaa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("");System.out.println(idd+cadenaa);
                                                                       Expresion expresion2 = new Expresion(idd,cadenaa);
                                                                                       Union.entradas.add(expresion2);
                                                                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENTRADAS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
